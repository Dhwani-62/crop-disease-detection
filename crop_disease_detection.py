# -*- coding: utf-8 -*-
"""crop_disease_detection

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19C-DN_MGR6xn7P22MeJv-w60wbgF9Mxz
"""

import zipfile
import os
import shutil # Import shutil for rmtree

# 1. Mount Google Drive
from google.colab import drive
drive.mount('/content/drive')

zip_path = '/content/drive/MyDrive/crop_disease_data.zip'

extract_path = '/content/drive/MyDrive/crop_disease_data/extracted'

if os.path.exists(extract_path):
    print(f"Removing existing extraction directory: {extract_path}")
    shutil.rmtree(extract_path)
    print("Existing directory removed.")

# Recreate extract path
print(f"Creating extraction directory: {extract_path}")
os.makedirs(extract_path, exist_ok=True)
print("Extraction directory created (or already exists).")

# Check if the zip file exists before attempting to extract
if not os.path.exists(zip_path):
    print(f"Error: The zip file was not found at {zip_path}")
    print("Please verify the file path and ensure the file exists in your Google Drive.")
    print("Expected path: MyDrive/crop_disease_data/crop_disease_data.zip")
else:
    # Extract .zip
    print(f"Attempting to extract {zip_path} to {extract_path}")
    with zipfile.ZipFile(zip_path, 'r') as zip_ref:
        zip_ref.extractall(extract_path)
    print("Successfully extracted to:")
    print(extract_path)

    print("\nVerifying extracted contents (first 5 items):")
    extracted_items = os.listdir(extract_path)
    for i, item in enumerate(extracted_items):
        if i >= 5:
            break
        print(f"- {item}")
    if not extracted_items:
        print("No items found in the extracted directory. Extraction might have failed or zip was empty.")

# Install tensorflow
!pip install tensorflow

# STEP 1: Import all necessary libraries
import os
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import tensorflow as tf
from sklearn.metrics import confusion_matrix, classification_report
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
from tensorflow.keras.callbacks import EarlyStopping

# STEP 2: Set dataset paths
train_dir = '/content/drive/MyDrive/crop_disease_data/extracted/Train'
val_dir   = '/content/drive/MyDrive/crop_disease_data/extracted/Validation'

# STEP 3: Image Preprocessing
IMG_SIZE = (128, 128)
BATCH_SIZE = 32

train_datagen = ImageDataGenerator(rescale=1./255)
val_datagen   = ImageDataGenerator(rescale=1./255)

train_gen = train_datagen.flow_from_directory(
    train_dir, target_size=IMG_SIZE, batch_size=BATCH_SIZE, class_mode='categorical')

val_gen = val_datagen.flow_from_directory(
    val_dir, target_size=IMG_SIZE, batch_size=BATCH_SIZE, class_mode='categorical')

# STEP 4: Build the CNN model
model = Sequential([
    Conv2D(32, (3, 3), activation='relu', input_shape=(IMG_SIZE[0], IMG_SIZE[1], 3)),
    MaxPooling2D(2, 2),
    Conv2D(64, (3, 3), activation='relu'),
    MaxPooling2D(2, 2),
    Flatten(),
    Dense(128, activation='relu'),
    Dropout(0.5),
    Dense(train_gen.num_classes, activation='softmax')
])

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

# STEP 5: Train the model (set minimal epochs)
EPOCHS = 5  # Adjust as needed
early_stop = EarlyStopping(monitor='val_loss', patience=2, restore_best_weights=True)

history = model.fit(train_gen, validation_data=val_gen, epochs=EPOCHS, callbacks=[early_stop])

# STEP 6: Plot accuracy & loss
plt.figure(figsize=(14, 5))

plt.subplot(1, 2, 1)
plt.plot(history.history['accuracy'], label='Train Accuracy')
plt.plot(history.history['val_accuracy'], label='Val Accuracy')
plt.title('Model Accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend()

plt.subplot(1, 2, 2)
plt.plot(history.history['loss'], label='Train Loss')
plt.plot(history.history['val_loss'], label='Val Loss')
plt.title('Model Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend()

plt.tight_layout()
plt.show()

# STEP 7: Evaluate on Validation Set (confusion matrix and classification report)
val_gen.reset()
pred_probs = model.predict(val_gen, verbose=1)
y_pred = np.argmax(pred_probs, axis=1)
y_true = val_gen.classes
class_labels = list(val_gen.class_indices.keys())

# Confusion Matrix
cm = confusion_matrix(y_true, y_pred)
plt.figure(figsize=(20, 18))
sns.heatmap(cm, xticklabels=class_labels, yticklabels=class_labels,
            annot=False, fmt='d', cmap='Blues')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix (on Validation Set)')
plt.show()

# STEP 8: Classification Report
print("\nClassification Report (Validation Set):\n")
print(classification_report(y_true, y_pred, target_names=class_labels))

#  STEP 9: Show 3 Predictions
val_gen.reset()
for i in range(3):
  # img shape: (1, 128, 128, 3), label shape: (1, 42)
    img, label = next(val_gen)
    # pred shape: (1, 42)
    pred = model.predict(img)

    predicted_index = np.argmax(pred[0])
    actual_index = np.argmax(label[0])

    print(f"Predicted index: {predicted_index}, Actual index: {actual_index}, Number of classes: {len(class_labels)}")

    plt.imshow(img[0])
    plt.title(f"Predicted: {class_labels[predicted_index]}\nActual: {class_labels[actual_index]}")
    plt.axis('off')
    plt.show()

#  STEP 10: Save Model
model.save('/content/drive/MyDrive/your_folder/plant_disease_model.h5')
print("\n Model saved as 'plant_disease_model.h5'")